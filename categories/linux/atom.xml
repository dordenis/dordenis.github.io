<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Ajaxblog]]></title>
  <link href="http://dordenis.github.io/categories/linux/atom.xml" rel="self"/>
  <link href="http://dordenis.github.io/"/>
  <updated>2014-10-06T07:22:55-04:00</updated>
  <id>http://dordenis.github.io/</id>
  <author>
    <name><![CDATA[AjaxBlog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Как настроить динамические виртуальные хосты для веб-разработки]]></title>
    <link href="http://dordenis.github.io/linux/how-to-set-up-dynamic-virtual-hosts-for-web-development/"/>
    <updated>2014-06-22T20:21:00-04:00</updated>
    <id>http://dordenis.github.io/linux/how-to-set-up-dynamic-virtual-hosts-for-web-development</id>
    <content type="html"><![CDATA[<p>После того как умер мой винчестер на ноутбуки и встала проблема заново поднять рабочее окружение, я задумался о том, чтобы использовать в качестве такого, образ на виртуальной машины.  Данная тема, довольно старая, все не как не доходили руки. Но коль делать все правильно, решил заодно решить проблему автоматически создания виртуальных хостов под проекты.</p>

<p>Что это дает, мы создаем папку с названием проекта myproject  и сразу имеем доступ к нему по адресу <a href="http://">http://</a> myproject.dev, не плохо правда.</p>

<!-- more -->


<h1>1. Настройка домена *.dev</h1>

<p>Ставим dnsmasq</p>

<p>{% codeblock lang:sh %}
sudo apt-get install dnsmasq
{% endcodeblock %}</p>

<p>в /etc/dnsmasq.d/devtld.conf</p>

<p>{% codeblock lang:sh %}
listen-address=127.0.0.1
address=/.dev/192.168.0.10 ;192.168.0.10 – ip вашей виртуальной машины
{% endcodeblock %}</p>

<p>Перезапускаем сервис</p>

<p>{% codeblock lang:sh %}
service dnsmasq restart
{% endcodeblock %}</p>

<p>Проверяем работу</p>

<p>{% codeblock lang:sh %}
ping test.dev</p>

<p>PING test.dev (192.168.0.10) 56(84) bytes of data.
64 bytes from localhost.localdomain (192.168.0.10): icmp_req=1 ttl=64 time=0.019 ms
64 bytes from localhost.localdomain (192.168.0.10): icmp_req=2 ttl=64 time=0.034 ms
64 bytes from localhost.localdomain (192.168.0.10): icmp_req=3 ttl=64 time=0.035 ms
{% endcodeblock %}</p>

<h1>2. Настройка веб-сервера</h1>

<p>Настроим наш веб сервер, в качестве такого у меня выступает ngnix. Данный конфиг является отправной точкой создания вашего собственного.</p>

<p>{% codeblock lang:sh %}
server {</p>

<pre><code>listen 80;
server_name .dev;

# dynamic vhosts for development
set $basepath "/path/to/your/workspace";

set $domain $host;
if ($domain ~ "^(.*)\.dev$") {
    set $domain $1;
}
set $rootpath "${domain}";
if (-d $basepath/$domain/public) {
    set $rootpath "${domain}/public";
}
if (-d $basepath/$domain/httpdocs) {
    set $rootpath "${domain}/httpdocs";
}
if (-d $basepath/$domain/web) {
    set $rootpath "${domain}/web";
}
if (-f $basepath/$domain/index.php) {
    set $rootpath $domain;
}
if (-f $basepath/$domain/index.html) {
    set $rootpath $domain;
}

root $basepath/$rootpath;

# enable PHP
index index.php app.php index.html;
location / {
    index index.php;
    error_page 404 = @indexphp;
}
location @indexphp {
    rewrite ^(.*)$ /index.php$1;
}
location ~ ^(.+\.php)(?:/.+)?$ {
    expires off;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;
}
# rewrite to index.php for pretty URL's
try_files $uri $uri/ /index.php?$args;

# block .ht* access
location ~ /\.ht {
    deny all;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Для Apache</p>

<p>{% codeblock lang:sh %}
<Virtualhost *:80></p>

<pre><code>VirtualDocumentRoot "/path/to/your/workspace/%1/public"
ServerName vhosts.dev
ServerAlias *.dev
UseCanonicalName Off
&lt;Directory "/path/to/your/workspace/*"&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre>

<p></Virtualhost>
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Превращаем Raspberry Pi в домашний web-server]]></title>
    <link href="http://dordenis.github.io/linux/raspberry-pi-transform-the-home-web-server/"/>
    <updated>2013-07-15T20:21:00-04:00</updated>
    <id>http://dordenis.github.io/linux/raspberry-pi-transform-the-home-web-server</id>
    <content type="html"><![CDATA[<p>Не так давно приобрел забавную игрушку Raspberry Pi. Я планирую использовать ее в качестве «мозгов» для робота на базе Arduino, но об этом в другой раз. Что бы «малина» не валялась без дела. пока я проектирую робота, решил на базе нее поднять домашний web-server.
И так приступим…</p>

<!-- more -->


<h1>1. Устанавливаем образ “wheezy”</h1>

<p>Скачиваем образ с <a href="http://www.raspberrypi.org/downloads">официального сайта</a>
Распаковываем, на данный момент это 2013-05-29-wheezy-armel.img
Подключаем карточку флешь память к компьютеру
Копируем образ на флеш-карту <strong>dd if=/home/user/Download/2013-05-29-wheezy-armel.img of=/dev/sdN</strong>, где sdN — имя вашей флешь-карточки
После того как создали образ, заходим в <strong>/etc/network/interfaces</strong> и прописываем сетевые настройки</p>

<p>{% codeblock lang:sh %}
auto lo
iface lo inet loopback</p>

<p>auto eth0
iface eth0 inet static</p>

<p>address 192.168.1.10
netmask 255.255.255.0
gateway 192.168.1.1
{% endcodeblock %}</p>

<h1>2. Настройка операционной системы</h1>

<p>В консоле набираем
{% codeblock lang:sh %}
sudo raspi-config
{% endcodeblock %}
И получаем графическое меню</p>

<p>{% img /images/post/rasbbery_1-627x412.png %}</p>

<ul>
<li><strong>expand_rootfs</strong> — здесь вы можете увеличить root размер на весь размер карты памяти</li>
<li><strong>change_pass</strong> — смена пароля пользователя «pi». При вводе пароль не отображается. Обязательно нужно сделать</li>
<li><strong>change_locate</strong> — установка языка системы</li>
<li><strong>memory_split</strong> — распределение памяти Raspberry Pi ставим 256</li>
<li><strong>overclock</strong> — разгон процессора Raspberry Pi, ставим Turbo тем более разработчики официально разрешили</li>
</ul>


<p>Остальные настройки по вашему желанию. После этого перегружаемся.
Не забудем обновить систему, командами
{% codeblock lang:sh %}
sudo apt-get update sudo apt-get upgrade
{% endcodeblock %}</p>

<h1>3. Установка web-server</h1>

<p>Устанавливаем все необходимое
{% codeblock lang:sh %}
sudo apt-get install nginx
sudo apt-get install php5-fpm php5-common php5-mysql php5-gd
sudo apt-get install mysql-server php5-mysql
{% endcodeblock %}</p>

<p>Запускаем
{% codeblock lang:sh %}
/etc/init.d/nginx nginx restart /etc/init.d/nginx php5-fpm restart
{% endcodeblock %}</p>

<p>Проверяем, набираем в браузере <a href="http://192.168.1.10,">http://192.168.1.10,</a> если все сделали правильно, то должны увидеть надпись <strong>Welcome to nginx!</strong></p>

<h1>4. Настройка web-server</h1>

<p>Создаем файл /etc/nginx/sites-enabled/ajaxblog
{% codeblock lang:sh %}
server {</p>

<pre><code>listen 8080;

index index.php index.html;

server_name 192.168.1.10 ajaxblog.ru, www.ajaxblog.ru;
root /var/www/html/ajaxblog;

# Делаем красивые урлы location / {
    try_files $uri $uri/ /index.php?q=$uri&amp;$args;
}

# Статичный контент отдаем напрямую с диска location ~* \.(xml|ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
    try_files $uri =404; access_log off; expires 7d;
}

# И наконец обработка php location ~ \.php$ {
    fastcgi_buffers 8 256k;
    fastcgi_buffer_size 128k;
    fastcgi_intercept_errors on;

    include fastcgi_params;
    fastcgi_pass unix:/var/run/php5-fpm.sock;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Создаем папку <strong>/var/www/html/ajaxblog</strong> куда заливаем wordpress</p>

<ol>
<li>Настройка DNS</li>
</ol>


<p>Наш сайт пока мы можем видеть только по локальному адресу <a href="http://192.168.1.10.">http://192.168.1.10.</a>
Для того чтобы мы могли видеть сайт по доменому имени <a href="http://ajaxblog.ru,">http://ajaxblog.ru,</a> нам нужно:</p>

<p>Прописать DNS запись у регистратора домена
{% codeblock lang:sh %}
@ A X.X.X.X www A X.X.X.X # X.X.X.X &ndash; IP адрес моего провайдера
{% endcodeblock %}</p>

<p>Теперь нужно чтобы запрос пришедший на X.X.X.X, был перенаправлен домашним роутером на Raspberry Pi.
Для этого в админки вашего роутера нужно настроить перенаправление.
Заходим на вкладку <strong>NAT Setting — Virtual Server</strong></p>

<p>{% codeblock lang:sh %}
Port Range  80
Local IP    192.168.1.10 #локальный ip Raspberry Pi
Local Port  80
Protocol    TCP
Description HTTP Server
{% endcodeblock %}</p>

<p>Через какое-то время обновиться DNS запись у провайдера и можно смело смотреть свой блог по адресу <a href="http://ajaxblog.ru">http://ajaxblog.ru</a></p>
]]></content>
  </entry>
  
</feed>
