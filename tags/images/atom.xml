<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: images | Ajaxblog]]></title>
  <link href="http://dordenis.github.io/tags/images/atom.xml" rel="self"/>
  <link href="http://dordenis.github.io/"/>
  <updated>2014-10-06T07:11:31-04:00</updated>
  <id>http://dordenis.github.io/</id>
  <author>
    <name><![CDATA[AjaxBlog]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intervention Image - простая библиотека для работы с изображениями]]></title>
    <link href="http://dordenis.github.io/php/easy-library-for-working-with-images/"/>
    <updated>2014-07-10T20:21:00-04:00</updated>
    <id>http://dordenis.github.io/php/easy-library-for-working-with-images</id>
    <content type="html"><![CDATA[<p>У каждого программиста есть свой набор библиотек, для рутинных операций. Например, работа с изображениями. На ваш суд представлю еще одну  &ndash; Intervention Image.</p>

<p>Из плюсов следует отметить тесную интеграцию с модным ныне Фреймворком  Laravel.</p>

<p>Как пишут автору  этой библиотеке. Intervention Image  является PHP  библиотекой с открытым исходным кодом  для обработки изображений и манипуляции с ним. Обеспечивает более простой и выразительный способ создания, редактирования и комбинирования изображений и поддерживает в настоящее время два наиболее распространенных библиотек обработки изображений GD  и Imagick.</p>

<!-- more -->


<h1>Чтение</h1>

<p>{% codeblock lang:php %}
$img = Image::make(&lsquo;foo/bar/baz.jpg&rsquo;);
{% endcodeblock %}</p>

<h1>Создание</h1>

<p>{% codeblock lang:php %}
$img = Image::canvas(800, 600, &lsquo;#ccc&rsquo;);
{% endcodeblock %}</p>

<h1>Наложение изображения</h1>

<p>{% codeblock lang:php %}
$img = Image::make(&lsquo;foo.jpg&rsquo;)&ndash;>resize(320, 240)&ndash;>insert(&lsquo;watermark.png&rsquo;);
{% endcodeblock %}</p>

<h1>Сохранение</h1>

<p>{% codeblock lang:php %}
Image::make(&lsquo;foo.jpg&rsquo;)&ndash;>resize(300, 200)&ndash;>save(&lsquo;bar.jpg&rsquo;);
{% endcodeblock %}</p>

<h1>HTTP Responses</h1>

<p>{% codeblock lang:php %}
$img = Image::canvas(800, 600, &lsquo;#ff0000&rsquo;);
echo $img->response(&lsquo;jpg&rsquo;, 70);
{% endcodeblock %}</p>

<h1>Загрузка</h1>

<p>{% codeblock lang:php %}
$img = Image::make($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;]);
$img->fit(300, 200);
$img->save(&lsquo;foo/bar.jpg&rsquo;);
{% endcodeblock %}</p>

<h1>Применение фильтров</h1>

<p>{% codeblock lang:php %}
$img->filter(new DemoFilter(45));
{% endcodeblock %}</p>

<p>{% codeblock lang:php %}
class DemoFilter implements FilterInterface
{</p>

<pre><code>/**
 * Default size of filter effects
 */
const DEFAULT_SIZE = 10;

/**
 * Size of filter effects
 *
 * @var integer
 */
private $size;

/**
 * Creates new instance of filter
 *
 * @param integer $size
 */
public function __construct($size = null)
{
    $this-&gt;size = is_numeric($size) ? intval($size) : self::DEFAULT_SIZE;
}

/**
 * Applies filter effects to given image
 *
 * @param  Intervention\Image\Image $image
 * @return Intervention\Image\Image
 */
public function applyFilter(\Intervention\Image\Image $image)
{
    $image-&gt;pixelate($this-&gt;size);
    $image-&gt;greyscale();

    return $image;
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<h1>Кеширование</h1>

<p>{% codeblock lang:php %}
$img = Image::cache(function($image) {</p>

<pre><code>$image-&gt;make('public/foo.jpg')-&gt;resize(300, 200)-&gt;greyscale();
</code></pre>

<p>});
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
