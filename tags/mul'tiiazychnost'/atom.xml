<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: мультиязычность | Ajaxblog]]></title>
  <link href="http://dordenis.github.io/tags/mul'tiiazychnost'/atom.xml" rel="self"/>
  <link href="http://dordenis.github.io/"/>
  <updated>2015-12-21T03:12:15-05:00</updated>
  <id>http://dordenis.github.io/</id>
  <author>
    <name><![CDATA[Denis Doroshenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Мультиязычный сайт с помощью Yii]]></title>
    <link href="http://dordenis.github.io/yii/multilanguage-website-with-yii/"/>
    <updated>2013-07-21T15:33:00-04:00</updated>
    <id>http://dordenis.github.io/yii/multilanguage-website-with-yii</id>
    <content type="html"><![CDATA[<p>Для одного из проекта, возникла необходимость в организации поддержки мультиязычности на сайте. Причем URL должны быть в определенном виде:</p>

<p><a href="http://site.ru/ru/contacts">http://site.ru/ru/contacts</a> для русского языка  <br/>
<a href="http://site.ru/en/contacts">http://site.ru/en/contacts</a> для английского языка</p>

<!-- more -->


<h3>Расширяем CUrlManager.</h3>

<p>Создаем файл <strong>protected/components/UrlManager.php</strong></p>

<p>{% codeblock lang:php %}
&lt;?php</p>

<p>class UrlManager extends CUrlManager {</p>

<pre><code>public function createUrl($route,$params=array(),$ampersand='&amp;')
{
    if (!isset($params['language'])) {
        if (Yii::app()-&gt;user-&gt;hasState('language'))
            Yii::app()-&gt;language = Yii::app()-&gt;user-&gt;getState('language');
        else if(isset(Yii::app()-&gt;request-&gt;cookies['language']))
            Yii::app()-&gt;language = Yii::app()-&gt;request-&gt;cookies['language']-&gt;value;
        $params['language']=Yii::app()-&gt;language;
    }
    return parent::createUrl($route, $params, $ampersand);
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Согласно нашему условию, выбранный язык должен быть частью URL. Это значит, что $_GET[&lsquo;language&rsquo;] должен быть определен. Для реализации этого мы переопределяем функцию createUrl() класса CUrlManager. Если язык в строке не указан, тогда мы его ищем в переменной сессии, затем в куках, и если до этого пользователь не менял язык то устанавливаем язык приложения по умолчанию. И затем формируем правильную строку URL уже с языком как параметр.</p>

<h3>Редактируем наш Controller</h3>

<p>Добавляем следующий код в <strong>protected/components/Controller.php</strong></p>

<p>{% codeblock lang:php %}
public function __construct($id, $module = null) {</p>

<pre><code>parent::__construct($id, $module);

// If there is a post-request, redirect the application to the provided url of the selected language
if (isset($_POST['language'])) {
    $language = $_POST['language'];
    $MultilangReturnUrl = $_POST[$language];
    $this-&gt;redirect($MultilangReturnUrl);
}

// Set the application language if provided by GET, session or cookie
if (isset($_GET['language'])) {
    Yii::app()-&gt;language = $_GET['language'];
    Yii::app()-&gt;user-&gt;setState('language', $_GET['language']);
    $cookie = new CHttpCookie('language', $_GET['language']);
    $cookie-&gt;expire = time() + (60 * 60 * 24 * 365); // (1 year)
    Yii::app()-&gt;request-&gt;cookies['language'] = $cookie;
} else if (Yii::app()-&gt;user-&gt;hasState('language')) {
    Yii::app()-&gt;language = Yii::app()-&gt;user-&gt;getState('language');
} else if (isset(Yii::app()-&gt;request-&gt;cookies['language'])) {
    Yii::app()-&gt;language = Yii::app()-&gt;request-&gt;cookies['language']-&gt;value;
}

Yii::app()-&gt;gettext-&gt;setLocale();
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Мы расширяем конструктор класса и добавляем язык для приложения. Так как все контроллеры будут наследоваться с этого контроллера, язык приложения будет установлен явно на каждый запрос.
Если не установленYii::app()&ndash;>language явно для каждого запроса в URL, он будет браться из конфигурационного файла приложения. Если же он не указан в конфигурационном фале, он будет идентичен Yii::app()&ndash;>sourceLanguage, который по умолчанию &lsquo;en_us&rsquo;.</p>

<h3>Редактируем конфиг файл</h3>

<p>Вносим изменения в <strong>protected/config/main.php</strong></p>

<p>{% codeblock lang:sh %}
return array(</p>

<pre><code>...
'sourceLanguage'=&gt;'en',
'language' =&gt; 'ru',
...

// application components
'components' =&gt; array(
    'gettext' =&gt; array(
        'class' =&gt; 'ext.gettext.components.GetText',

        // следующие параметры не обезательны
        'domain' =&gt; 'имя домена', // defualt messages
        'locale_dir' =&gt; 'путь до папки с переводами', // defualt Yii::app()-&gt;basePath.DIRECTORY_SEPARATOR.'messages';
        'locale' =&gt; array(
            // установленные на компьютере локале
            // locale -a
            'ru' =&gt;'ru_RU',
            'en' =&gt; 'en_US',
         ) 
    ),        
    ...
);
</code></pre>

<p>);
{% endcodeblock %}</p>

<h3>Добавляем расширение</h3>

<p>Создаем файл <strong>protected/extensions/gettext/components/GetText.php</strong></p>

<p>{% codeblock lang:php %}
&lt;?php</p>

<p>class GetText extends CApplicationComponent
{</p>

<pre><code>/**
 * @var GetText domain.
 */
public $domain = 'messages';

/**
 * @var Language in yii.
 */
public $language;

/**
 * @var Directory containing gettext messages.
 */
public $locale_dir;

/**
 * @var array locale (locale -a)
 */
public $locale = array(
    'ru' =&gt; 'ru_RU',
    'en' =&gt; 'en_US',
);

/**
 * Initialize php's gettext.
 */
public function init()
{
    $this-&gt;setLocale();
}

/**
 * Bind the gettext domain and make it the default
 */
public function bindDomain()
{
    if (!bindtextdomain($this-&gt;domain, $this-&gt;locale_dir)) {
        throw new Exception("Found folder to translations {$this-&gt;locale_dir}");
    }
    bind_textdomain_codeset($this-&gt;domain, 'utf-8');
    textdomain($this-&gt;domain);
}

/**
 * Get canonical locale to the format required for gettext
 */
public function getLocale($id)
{
    $locale = isset($this-&gt;locale[$id]) ? $this-&gt;locale[$id] : $id;
    $locale = explode('_', $locale);
    if (isset($locale[1])) $locale[1] = strtoupper($locale[1]);
    return implode('_', $locale);
}

/**
 * Set locale
 */
public function setLocale()
{
    $this-&gt;language = $this-&gt;language ? $this-&gt;language : Yii::app()-&gt;language;
    $locale = $this-&gt;getLocale($this-&gt;language);

    $this-&gt;locale_dir = $this-&gt;locale_dir ? $this-&gt;locale_dir : Yii::app()-&gt;basePath . DIRECTORY_SEPARATOR . 'messages';

    if (!setlocale(LC_ALL, $locale . '.utf8', $locale . '.utf-8', $locale . '.UTF8', $locale . '.UTF-8')) {
        throw new Exception("Not installed in the system locale {$locale}");
    }

    header('Content-Language: ' . str_replace('_', '-', $this-&gt;language));
    $this-&gt;bindDomain();
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h3>Размешаем переводы</h3>

<p>Создаем в папке <strong>protected/messages</strong>, следующию структуру каталогов. Где и размещаем наши переводы.</p>

<p>{% codeblock lang:sh %}
messages</p>

<pre><code>    en_US
         LC_MESSAGES
                  messages.mo
                  messages.po  
    ru_RU
         LC_MESSAGES
                  messages.mo
                  messages.po  
</code></pre>

<p>{% endcodeblock %}</p>

<h1>6. Что делать если не работает</h1>

<ol>
<li>Проверить установлена в систему нужная локаль (locale -a)</li>
<li>Проверить работу setlocale(), должно вернуться имя локале</li>
<li>Проверить работу bindtextdomain(), должно вернуться путь до файлов перевода</li>
</ol>

]]></content>
  </entry>
  
</feed>
