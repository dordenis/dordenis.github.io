<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: разработка | Ajaxblog]]></title>
  <link href="http://dordenis.github.io/tags/razrabotka/atom.xml" rel="self"/>
  <link href="http://dordenis.github.io/"/>
  <updated>2015-12-21T03:12:15-05:00</updated>
  <id>http://dordenis.github.io/</id>
  <author>
    <name><![CDATA[Denis Doroshenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Intervention Image - простая библиотека для работы с изображениями]]></title>
    <link href="http://dordenis.github.io/php/easy-library-for-working-with-images/"/>
    <updated>2014-08-21T20:21:00-04:00</updated>
    <id>http://dordenis.github.io/php/easy-library-for-working-with-images</id>
    <content type="html"><![CDATA[<p>У каждого программиста есть свой набор библиотек, для рутинных операций. Например, работа с изображениями. На ваш суд представлю еще одну  &ndash; Intervention Image.</p>

<p>Из плюсов следует отметить тесную интеграцию с модным ныне Фреймворком  Laravel.</p>

<p>Как пишут автору  этой библиотеке. Intervention Image  является PHP  библиотекой с открытым исходным кодом  для обработки изображений и манипуляции с ним. Обеспечивает более простой и выразительный способ создания, редактирования и комбинирования изображений и поддерживает в настоящее время два наиболее распространенных библиотек обработки изображений GD  и Imagick.</p>

<!-- more -->


<h3>Чтение</h3>

<p>{% codeblock lang:php %}
$img = Image::make(&lsquo;foo/bar/baz.jpg&rsquo;);
{% endcodeblock %}</p>

<h3>Создание</h3>

<p>{% codeblock lang:php %}
$img = Image::canvas(800, 600, &lsquo;#ccc&rsquo;);
{% endcodeblock %}</p>

<h3>Наложение изображения</h3>

<p>{% codeblock lang:php %}
$img = Image::make(&lsquo;foo.jpg&rsquo;)&ndash;>resize(320, 240)&ndash;>insert(&lsquo;watermark.png&rsquo;);
{% endcodeblock %}</p>

<h3>Сохранение</h3>

<p>{% codeblock lang:php %}
Image::make(&lsquo;foo.jpg&rsquo;)&ndash;>resize(300, 200)&ndash;>save(&lsquo;bar.jpg&rsquo;);
{% endcodeblock %}</p>

<h3>HTTP Responses</h3>

<p>{% codeblock lang:php %}
$img = Image::canvas(800, 600, &lsquo;#ff0000&rsquo;);
echo $img->response(&lsquo;jpg&rsquo;, 70);
{% endcodeblock %}</p>

<h3>Загрузка</h3>

<p>{% codeblock lang:php %}
$img = Image::make($_FILES[&lsquo;image&rsquo;][&lsquo;tmp_name&rsquo;]);
$img->fit(300, 200);
$img->save(&lsquo;foo/bar.jpg&rsquo;);
{% endcodeblock %}</p>

<h3>Применение фильтров</h3>

<p>{% codeblock lang:php %}
$img->filter(new DemoFilter(45));
{% endcodeblock %}</p>

<p>{% codeblock lang:php %}
class DemoFilter implements FilterInterface
{</p>

<pre><code>/**
 * Default size of filter effects
 */
const DEFAULT_SIZE = 10;

/**
 * Size of filter effects
 *
 * @var integer
 */
private $size;

/**
 * Creates new instance of filter
 *
 * @param integer $size
 */
public function __construct($size = null)
{
    $this-&gt;size = is_numeric($size) ? intval($size) : self::DEFAULT_SIZE;
}

/**
 * Applies filter effects to given image
 *
 * @param  Intervention\Image\Image $image
 * @return Intervention\Image\Image
 */
public function applyFilter(\Intervention\Image\Image $image)
{
    $image-&gt;pixelate($this-&gt;size);
    $image-&gt;greyscale();

    return $image;
}
</code></pre>

<p>}</p>

<p>{% endcodeblock %}</p>

<h3>Кеширование</h3>

<p>{% codeblock lang:php %}
$img = Image::cache(function($image) {</p>

<pre><code>$image-&gt;make('public/foo.jpg')-&gt;resize(300, 200)-&gt;greyscale();
</code></pre>

<p>});
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Как настроить динамические виртуальные хосты для веб-разработки]]></title>
    <link href="http://dordenis.github.io/linux/how-to-set-up-dynamic-virtual-hosts-for-web-development/"/>
    <updated>2014-06-22T20:21:00-04:00</updated>
    <id>http://dordenis.github.io/linux/how-to-set-up-dynamic-virtual-hosts-for-web-development</id>
    <content type="html"><![CDATA[<p>После того как умер мой винчестер на ноутбуки и встала проблема заново поднять рабочее окружение, я задумался о том, чтобы использовать в качестве такого, образ на виртуальной машины.  Данная тема, довольно старая, все не как не доходили руки. Но коль делать все правильно, решил заодно решить проблему автоматически создания виртуальных хостов под проекты.</p>

<p>Что это дает, мы создаем папку с названием проекта myproject  и сразу имеем доступ к нему по адресу <a href="http://">http://</a> myproject.dev, не плохо правда.</p>

<!-- more -->


<h3>Настройка домена *.dev</h3>

<p>Ставим dnsmasq</p>

<p>{% codeblock lang:sh %}
sudo apt-get install dnsmasq
{% endcodeblock %}</p>

<p>в /etc/dnsmasq.d/devtld.conf</p>

<p>{% codeblock lang:sh %}
listen-address=127.0.0.1
address=/.dev/192.168.0.10 ;192.168.0.10 – ip вашей виртуальной машины
{% endcodeblock %}</p>

<p>Перезапускаем сервис</p>

<p>{% codeblock lang:sh %}
service dnsmasq restart
{% endcodeblock %}</p>

<p>Проверяем работу</p>

<p>{% codeblock lang:sh %}
ping test.dev</p>

<p>PING test.dev (192.168.0.10) 56(84) bytes of data.
64 bytes from localhost.localdomain (192.168.0.10): icmp_req=1 ttl=64 time=0.019 ms
64 bytes from localhost.localdomain (192.168.0.10): icmp_req=2 ttl=64 time=0.034 ms
64 bytes from localhost.localdomain (192.168.0.10): icmp_req=3 ttl=64 time=0.035 ms
{% endcodeblock %}</p>

<h3>Настройка веб-сервера</h3>

<p>Настроим наш веб сервер, в качестве такого у меня выступает ngnix. Данный конфиг является отправной точкой создания вашего собственного.</p>

<p>{% codeblock lang:sh %}
server {</p>

<pre><code>listen 80;
server_name .dev;

# dynamic vhosts for development
set $basepath "/path/to/your/workspace";

set $domain $host;
if ($domain ~ "^(.*)\.dev$") {
    set $domain $1;
}
set $rootpath "${domain}";
if (-d $basepath/$domain/public) {
    set $rootpath "${domain}/public";
}
if (-d $basepath/$domain/httpdocs) {
    set $rootpath "${domain}/httpdocs";
}
if (-d $basepath/$domain/web) {
    set $rootpath "${domain}/web";
}
if (-f $basepath/$domain/index.php) {
    set $rootpath $domain;
}
if (-f $basepath/$domain/index.html) {
    set $rootpath $domain;
}

root $basepath/$rootpath;

# enable PHP
index index.php app.php index.html;
location / {
    index index.php;
    error_page 404 = @indexphp;
}
location @indexphp {
    rewrite ^(.*)$ /index.php$1;
}
location ~ ^(.+\.php)(?:/.+)?$ {
    expires off;
    fastcgi_pass 127.0.0.1:9000;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;
}
# rewrite to index.php for pretty URL's
try_files $uri $uri/ /index.php?$args;

# block .ht* access
location ~ /\.ht {
    deny all;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Для Apache</p>

<p>{% codeblock lang:sh %}
<Virtualhost *:80></p>

<pre><code>VirtualDocumentRoot "/path/to/your/workspace/%1/public"
ServerName vhosts.dev
ServerAlias *.dev
UseCanonicalName Off
&lt;Directory "/path/to/your/workspace/*"&gt;
    Options Indexes FollowSymLinks MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
</code></pre>

<p></Virtualhost>
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
